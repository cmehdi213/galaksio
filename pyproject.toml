[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "galaksio"
version = "0.4.0"
description = "A modern, responsive web interface for running Galaxy workflows"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "GPL-3.0"}
authors = [
    {name = "Original: SGBC", email = "original@example.com"},
    {name = "Updated: cmehdi213", email = "cmehdi213@example.com"},
]
maintainers = [
    {name = "cmehdi213", email = "cmehdi213@example.com"},
]
keywords = ["galaxy", "bioinformatics", "workflows", "web-interface"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
dependencies = [
    "bioblend==1.6.0",
    "flask==3.0.0",
    "requests==2.31.0",
    "python-dateutil==2.8.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docker = [
    "docker>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/cmehdi213/galaksio"
Repository = "https://github.com/cmehdi213/galaksio"
Documentation = "https://galaksio.readthedocs.io/"
"Bug Reports" = "https://github.com/cmehdi213/galaksio/issues"

[project.scripts]
galaksio = "server.launch_server:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.json", "*.png", "*.ico", "*.txt", "*.cfg"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
